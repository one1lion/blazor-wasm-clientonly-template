@inject UiState UiState

@implements IDisposable

<div class="sidebar @NavMenuCssClass">
  <ul class="nav flex-column">
    <li class="nav-item px-3">
      <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
        <span class="oi oi-home" aria-hidden="true"></span> <span class="nav-link-text">Home</span>
</NavLink>
    </li>
    <li class="nav-item px-3">
      <NavLink class="nav-link" href="counter">
        <span class="oi oi-plus" aria-hidden="true"></span> <span class="nav-link-text">Counter</span>
      </NavLink>
    </li>
    <li class="nav-item px-3">
      <NavLink class="nav-link" href="fetchdata">
        <span class="oi oi-list-rich" aria-hidden="true"></span> <span class="nav-link-text">Fetch data</span>
      </NavLink>
    </li>
  </ul>
</div>

<div class="dark-mode-toggler@(UiState.DarkModeEnabled ? " on" : "")" @onclick:stopPropagation="true">
  <SliderButton ToggledOn="UiState.DarkModeEnabled"
                Height="28px"
                Round="true"
                LabelText="@($"Dark Mode")"
                ToggledOnChanged="ToggleDarkMode"
                AddCssClass="nav-link"
                @ref="sliderButton" />
</div>

@code {
  [Parameter]
  public bool Collasped {
    get => collapseNavMenu;
    set {
      collapseNavMenu = value;
      StateHasChanged();
    }
  }
  private bool collapseNavMenu = true;

  private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

  SliderButton sliderButton;

  protected override void OnInitialized() {
    UiState.OnNotifyStateChanged += UpdateDarkModeToggle;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      await UiState.InitializeAsync();
    }
  }

  async Task ToggleDarkMode(bool toggleTo) {
    await UiState.SetDarkModeAsync(toggleTo);
  }

  async void UpdateDarkModeToggle() {
    if (sliderButton is { }) {
      await sliderButton.UpdateState(UiState.DarkModeEnabled);
    }
    await InvokeAsync(() => StateHasChanged());
  }

  void IDisposable.Dispose() {
    UiState.OnNotifyStateChanged -= StateHasChanged;
  }
}
